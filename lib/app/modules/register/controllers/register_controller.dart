import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:get/get.dart';
import 'package:flutter/material.dart';
import '../../../data/models/userModel.dart'; // Import du mod√®le UserModel
import '../../../services/firebase_store_service.dart'; // Import du service FirestoreService

class RegisterController extends GetxController {
  // Contr√¥leurs pour les champs de formulaire
  final TextEditingController nomController = TextEditingController();
  final TextEditingController prenomController = TextEditingController();
  final TextEditingController telephoneController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  final FirestoreService _firestoreService = FirestoreService(); // Instance du service Firestore
  var isPasswordVisible = false.obs;

  // M√©thode pour enregistrer un utilisateur
  Future<void> registerUser() async {
    try {
      print('üîÑ Tentative de cr√©ation d\'un nouvel utilisateur avec email : ${emailController.text.trim()}'); // Log initial

      // Cr√©er un utilisateur avec email et mot de passe
      // UserCredential userCredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(
      //   email: emailController.text.trim(),
      //   password: passwordController.text.trim(),
      // );
      print('‚úÖ Utilisateur cr√©√© avec succ√®s dans Firebase Authentication'); // Log apr√®s la cr√©ation dans Firebase

      // R√©cup√©rer l'ID de l'utilisateur
      // User? user = userCredential.user;
      // print('user:  $user');
      // V√©rifier si l'utilisateur a √©t√© cr√©√© correctement
      // if (user != null) {
        // print('üìã UID utilisateur : ${user.uid}'); // Log UID de l'utilisateur

        // Cr√©er un mod√®le `UserModel`
        UserModel userModel = UserModel(
          id: DateTime.now().millisecondsSinceEpoch, // ID unique bas√© sur le timestamp
          nom: nomController.text.trim(),
          prenom: prenomController.text.trim(),
          email: emailController.text.trim(),
          telephone: telephoneController.text.trim(),
          solde: 0.0,
          codeSecret: '1234', // D√©finissez un code secret initial ou remplacez-le par une saisie utilisateur
          role: 'client', // Assurez-vous que cela correspond √† votre logique m√©tier
          createdAt: DateTime.now().toIso8601String(),
          updatedAt: DateTime.now().toIso8601String(),
        );

        // Enregistrer les informations dans Firestore via le service
        await _firestoreService.addDocument('users', userModel.toFirestore());
        print('‚úÖ Donn√©es utilisateur enregistr√©es dans Firestore avec succ√®s'); // Log enregistrement Firestore

        // Afficher un message de succ√®s
        Get.snackbar('Succ√®s', 'Inscription r√©ussie');
        print('üéâ Inscription r√©ussie, redirection vers la page de connexion'); // Log succ√®s inscription

        // Naviguer vers l'√©cran de connexion ou l'√©cran principal
        Get.offAllNamed('/login');
      // } else {
      //   print('‚ùå Erreur : Utilisateur non trouv√© apr√®s la cr√©ation'); // Log si utilisateur introuvable
      //   Get.snackbar('Erreur', 'Utilisateur introuvable.');
      // }
    } catch (e) {
      // G√©rer les erreurs
      print('‚ùå Erreur lors de l\'inscription : $e'); // Log erreur
      Get.snackbar('Erreur', 'Erreur : ${e.toString()}');
    }
  }

  // M√©thode pour basculer la visibilit√© du mot de passe
  void togglePasswordVisibility() {
    isPasswordVisible.value = !isPasswordVisible.value;
  }

  @override
  void onClose() {
    nomController.dispose();
    prenomController.dispose();
    telephoneController.dispose();
    emailController.dispose();
    passwordController.dispose();
    super.onClose();
  }
}
